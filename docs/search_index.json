[
["test-cdw.html", "A Test your database set up A.1 Test your connection A.2 Opening RStudio A.3 Fixing the default package installation directory A.4 Installing getcdw A.5 Testing getcdw", " A Test your database set up A.1 Test your connection First, let’s make sure your connection works. You’ll need the user name and password you received from Nancy Fan. Here are the steps to see if that connection works: Navigate to C:\\Windows\\SysWOW64. Double click odbcad32. It’s the application highlighted in the following image: You’ll now have the ODBC Data Source Administrator open. Click the “System DSN” tab and then click the “Add..” button. Scroll down to close to the bottom of the list of drivers. There you’ll find “Oracle in instantclient_11_2”. Double click this. You’ll now be in a window that asks you for some information to configure this driver. Fill out the Data Source Name as “URELUAT” and find “URELUAT” in the dropdown menu for TNS Service Name. Enter your user name (the one given to you by Nancy, which is probably the same as your CalNet ID) as the User ID. Click “Test Connection”. Enter your password (given to you by Nancy) in the Password field. Click “OK”. You should now get a pop up message letting you know that the connection was successful. Click “OK” three times to close out the ODBC Source Administrator. If you did not get this message and instead got an error message, do not continue with the rest of these instructions until your connection is successful. You may have the wrong password, or there may be other connection issues. A.2 Opening RStudio If your connection was successful, let’s move on to setting up some packages you’ll need. First, open RStudio. If you don’t have an icon on your desktop, you can find the program by searching for “rstudio” in your Start menu. You’ll also find a copy at C:\\Program Files\\RStudio\\bin. If you want a shortcut on your desktop, simply drag and drop the rstudio application. When RStudio is open, you’ll see a few different panes on the screen. The console is where you can type commands and see output. We only need to worry about the console right now. It’s this part of the screen: You also want to make sure you’re using the correct version of R. Here are the steps to do so: Go to the Tools dropdown menu at the top of the screen, and select Global Options. You’ll see a box that looks like this: The top box tells you the R version you’re using. Click on the “Change..” button. There may be multiple versions of R available, pick the latest one, but pick the “[32-bit]” one. As of this September 2017, the version you should pick is “[32-bit] C:\\Program Files\\R\\R-3.4.1” Depending on when you are reading this, you may have a later version of R available – use that, just be sure to pick the version that is “[32-bit]” Click “Ok” twice. You may be prompted to restart the program. If so, go ahead and do so. A.3 Fixing the default package installation directory By default, R will install packages to a local directory. While this doesn’t cause any immediate problems, it does mean that all of your packages will disappear every time IST recomposes our machines. To avoid having to re-install everything every few weeks, we can change the default package installation directory. You can do this by copying and pasting the following commands into your R console: # the first part sets up the new package directory package_dir &lt;- &quot;P:/R/win-library/packages&quot; if (!dir.exists(package_dir)) dir.create(package_dir, recursive = TRUE) # then make a configuration file that notifies R of the new package directory env_file &lt;- &quot;P:/.Renviron&quot; if (!file.exists(env_file)) file.create(env_file) # and add the new location to the configuration file cat(&quot;\\nR_LIBS_USER=&#39;&quot;, package_dir, &quot;&#39;&quot;, sep = &quot;&quot;, file = env_file, append = TRUE) # we also update the current R session about the new set up # (this is so we don&#39;t have to restart for the changes to take effect) do.call(Sys.setenv, list(R_LIBS_USER = package_dir)) # finally we update where R will look when loading a package .libPaths(package_dir) A.4 Installing getcdw Before you can install getcdw, you’ll need to install a few packages. Once again, just copy and paste the following into the console: install.packages(&quot;devtools&quot;) install.packages(&quot;dplyr&quot;, dependencies = TRUE) install.packages(&quot;S:/UR_Everyone/Rohit_Saini/ROracle/ROracle_1.2-2.zip&quot;, repos = NULL) There may be a pause for a few seconds during installation of the packages. A little stop sign will appear in the upper right corner of the console while the script is running. Once this stop sign is gone, you should get an output message that tells you that each package has been successfully unpacked and where the downloaded packages are stored. You’re now ready to move on to the next line. Now go ahead and use devtools to install getcdw. You’ll need to run this line of code: devtools::install_github(&quot;tarakc02/getcdw&quot;) You should get a message that getcdw has been installed. Again there may be a pause while the package is being installed. A.5 Testing getcdw Let’s go ahead and load the library for getcdw: library(getcdw) Copy the above into your console and press enter. It will appear that nothing happened, but that actually means everything is fine. Now all we need to do is run a simple query to test the connection. We’ll do this by entering a SQL query into the console and seeing if it returns valid data (which would mean that you are able to connect to the database). When you do so, you’ll be prompted for some information, please read the instructions below and make sure you understand what you’re supposed to enter: get_cdw(&quot;select * from dual&quot;) When you do this for the first time, you will be prompted for three pieces of information: Your “UID”: This is your username to log-in to the database. Unless you were told otherwise, this should be the same as your CalNet ID Your “PWD”: This is the password to log-in to the database. You should have received this from Nancy Fan, and it looks like a long random set of characters, numbers, and other symbols: Finally, you’ll be prompted for a “secret passphrase.” The database password is long and confusing and impossible to remember, which encourages most of us to write it down somewhere and keep it near the computer, which is insecure! So instead getcdw allows you to pick your own secret passphrase (this can be anything, from a single word to a memorable sentence, or whatever you think is easy for you to remember but not easy for someone else to guess). After this step, you will only ever be required to enter your secret passphrase – you will no longer be prompted for your database UID or PWD. If everything is working properly, you should see something like this: ## # A tibble: 1 x 1 ## dummy ## &lt;chr&gt; ## 1 X If that’s what you see, you are all set! Stay tuned for further instructions as we work to roll out the new suite of tools! "]
]
