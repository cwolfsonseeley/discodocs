[
["index.html", "Documentation for the discoveryengine 1 Welcome 1.1 Contribute to the Disco Engine 1.2 Contribute to this documentation", " Documentation for the discoveryengine 1 Welcome Did I mention that I like to dance? Welcome to the introduction to and extended documentation for the discoveryengine! The discoveryengine, also known as “Disco Engine” or just “Disco,” is a tool enabling Prospect Development staff to do custom prospecting, written in the R programming language. For more information, see What is the Disco Engine? If you are already familiar with the Disco Engine, and looking for some quick tips to refresh your memory, check out the cheat sheet. Though the Disco Engine is written in R, you don’t need to have any experience using R in order to get started. That said, if you’re brand new to R and RStudio, check out our brief introduction to R and RStudio. Otherwise, feel free to read this document in order, or to jump around or just bookmark it and refer to it as needed. You may find the search feature helpful, you can access it by clicking on the little magnifying glass at the top of the screen. 1.1 Contribute to the Disco Engine The Disco Engine is a tool made by and for Prospect Development. If you see something that doesn’t work correctly, or documentation that could be made clearer, or a widget that would be useful that isn’t implemented, or anything at all that could be improved in the Disco Engine, please submit an issue by clicking on the green “New Issue” button on the Disco engine issues page. 1.2 Contribute to this documentation This site is a work in progress. One way you can help is to report any mistakes you find (typos, spelling mistakes, grammatical errors) or any areas that could be explained better (if something was not clear to you, there’s a good chance it won’t be clear to others either). This documentation site has its own Disco-docs issues page – click on the green “New Issue” button and enter a short message explaining what’s wrong. If you’d like to suggest edits directly, you can do so by clicking on the pen-and-paper icon at the top of any page on this site (guide coming soon). Thank you! "],
["what-is-disco.html", "2 What is the Disco Engine? 2.1 Vocabulary and Grammar 2.2 Facilitating discovery", " 2 What is the Disco Engine? If you happen to have an APRA account, this article in APRA Connections magazine is a good introduction. If you don’t have an APRA account, then read on . . . The Discovery Engine, or Disco Engine, is a prospecting tool that empowers Prospect Development staff to precisely define (and pull together) constitutencies for their fundraising clients. It does so by providing two complementary resources: a vocabulary and grammar for specifying constituencies, and tools to facilitate discovery of constituencies. 2.1 Vocabulary and Grammar The Disco Engine is based on the idea that a constituency can be defined using one or more predicates (such as “majored in math” or “attended a Discover Cal event”), where multiple predicates are combined using “and”, “or”, or “but not.” To illustrate, here is a sample constituency definition for the department of mathematics: majored in mathematics or has given to the math department The constituency is then just any individual who fits the definition. The most basic tool that the Disco Engine provides is called a widget, which is a tool for generating a simple predicate. For instance, the widget majored_in allows us to build the first part of our example definition: majored_in(mathematics) Furthermore, the Disco Engine provides the following connectors to combine predicates in order to create more complex definitions: %and% %or% %but_not% So in the language of the Disco Engine, our definition would look like: majored_in(mathematics) %or% gave_to_department(mathematics) There is no limit to the number of predicates that can be strung together to form a definition: majored_in(mathematics) %or% gave_to_department(mathematics) %and% lives_in_msa(san_francisco) These definitions can quickly become very complex. To manage that complexity, the Disco Engine provides the ability to assign names to definitions, that can then be used to construct more complex definitions: is_math_constituent = majored_in(mathematics) %or% gave_to_department(mathematics) local_math_constituent = is_math_constituent %and% lives_in_msa(san_francisco) parent_of_local_math_constituent = parent_of(local_math_constituent) Together, the collection of predicates, the logical operators, and the ability to assign names form an expressive language for describing custom constituencies for a variety of purposes. Best of all, the Disco Engine gives us the ability to pull the IDs of a defined constituency from the database! display(parent_of_local_math_constituent) ## # A tibble: 530 x 1 ## entity_id ## &lt;dbl&gt; ## 1 1168 ## 2 4522 ## 3 6322 ## 4 6326 ## 5 7644 ## 6 11512 ## 7 23989 ## 8 24151 ## 9 24247 ## 10 26492 ## # ... with 520 more rows 2.2 Facilitating discovery Having a clear language for prospecting and defining constituencies is nice, but Prospect Development is increasingly being asked to do affinity-based prospecting, which often involves defining new constituencies that don’t have clear-cut coding associated with them yet, or digging into student activity, interest, affiliation, and other codes to figure out which ones might fit the constituency to be defined. That need motivates the Disco Engine’s bots, such as the brainstorm bot and the matrix bot. We’ve already seen examples of using predicates to find individuals, but bots allow us to search for predicates. brainstorm_bot(&quot;robot*&quot;, &quot;artificial intelligence&quot;, &quot;AI&quot;) ## attended_event ## 6724: Haas East Bay Chp Robotic Event 06-18-14 ## has_interest ## AIN: Artificial Intelligence ## ROB: Robotics ## participated_in ## ENRO: Cal Robotics ## UROB: Robotmedia Presents "],
["r-intro.html", "3 Introduction to R and RStudio", " 3 Introduction to R and RStudio The discoveryengine works best when used with RStudio. Watch this video for a quick tour around RStudio: "],
["installation.html", "4 Installation 4.1 Required packages 4.2 A disco test", " 4 Installation In order to use the discoveryengine, you’ll have to install it. And in order to successfully install the discoveryengine, you’ll have to install a few other packages, too. The introduction to RStudio video showed you how to install new packages both by typing install commands into the console, or by using RStudio’s “Packages” pane. Here, we’ll go through the installation step-by-step by typing out the install commands (copying and pasting is a good way to avoid frustrating typos!). Note that installation can sometimes be a pain. But once you’ve gotten through the process successfully, you won’t have to deal with it again! 4.1 Required packages At this point, you should have already: tested your CDW connection installed getcdw run a test query If you haven’t completed all of those items, head over to the step-by-step guide and complete those steps, and then return here. Ok, so if you’ve got getcdw working properly, that means you’ve already installed devtools. All that’s left is to install listbuilder and discoveryengine packages: devtools::install_github(&quot;tarakc02/listbuilder&quot;) devtools::install_github(&quot;tarakc02/discoveryengine&quot;) There are a couple more packages that are optional, but will make the discoveryengine even better: devtools::install_github(&quot;tarakc02/preprocessr&quot;) install.packages(&quot;DT&quot;) 4.2 A disco test In order to make sure everything is working properly, we’ll run a quick disco test: # you&#39;ll always load the discoveryengine package before doing anythying else library(discoveryengine) # make sure we can create a disco definition high_cap = has_capacity(1) # make sure that things print properly high_cap ## LISTBUILDER DEFINITION (type: entity_id) ## . source: d_entity_mv.entity_id (entity_id) ## . logic: capacity_rating_code IN 1 # make sure we can send the defintion to the data warehouse display(high_cap) ## # A tibble: 169 x 1 ## entity_id ## &lt;dbl&gt; ## 1 1969 ## 2 3105 ## 3 3422 ## 4 7644 ## 5 12178 ## 6 17464 ## 7 18139 ## 8 20039 ## 9 20125 ## 10 20227 ## # ... with 159 more rows If you got this far without any problems, then congrats! You are a disco dancer! "],
["intro-example.html", "5 An introductory example 5.1 Develop a strategy 5.2 Create the definition 5.3 Send the definition to the CDW", " 5 An introductory example Before diving in to details, let’s work through a simple real-life example. We’ll explain the functions used in more detail in later sections, but here you can see what the tool looks like in action. Here is our scenario: A fundraiser just called, and is trying to organize an event in San Francisco that will feature a well-known technologist. She wants you to help her find prospects to invite to the event. We start out by loading the discoveryengine: library(discoveryengine) 5.1 Develop a strategy You might already be thinking of what sorts of prospects we should look for. That’s good! There are countless ways to respond to this request, and you’ll have to rely on your own expertise in order to know who to include on a potential invite list. For this example, I’ll use the following definition of a good prospect: has demonstrated an interest in technology, and … lives or works in/near San Francisco Note that we now have a pretty clear idea of who to look for, but we need more precision. For instance, what constitutes a “demonstrated interest in technology?” What does it mean to be “in/near San Francisco?” In day-to-day conversations, we don’t necessarily need that level of precision to understand one another, but since we’ll need to translate this request into language a computer can understand, the more precision the better. I’ll define a “demonstrated interest in technology” as having either an interest code or a philanthropic affinity related to technology, and “in/near San Francisco” as anywhere that falls into the San Francisco Metropolitan Statistical Area (MSA). 5.2 Create the definition So now that we have a precise idea of who we want to find, we can create a definition that the computer will understand. This is important, since our computer is the only link we have to the CADS Data Warehouse. We can give it a precise definition in a language that it understands, and it will then relay our request to the CADS Data Warehouse. The CADS data warehouse can then search for people who meet our definition, and send them back to the computer, which will then display the list to us. Ideally, our definition would look like this: has_tech_interest %and% is_in_sf. Of course, we haven’t defined those pieces yet, so just typing that in will result in an error has_tech_interest %and% is_in_sf ## Error in operate(block1, block2, &quot;intersect&quot;): object &#39;has_tech_interest&#39; not found But still we’ve made progress. We broke a big problem (“define a prospect for this SF tech event”) into two smaller problems (“define having a tech interest” and “define being in San Francisco”). Let’s tackle each of these one by one. We start by defining has_tech_interest. Recall that we decided to use interest codes and philanthropic affinities here. I happen to already know that there is an interest code for “technology”, but I’m less familiar with the philanthropic affinities area. So I’ll use the search feature that is built into most widgets, accessed by entering a question mark followed by a search term into the widget: has_philanthropic_affinity(?tech) ## synonym code ## science_technology ST Ah, ok. I can use either the code ST or the synonym science_technology. has_tech_interest = has_interest(technology) %or% has_philanthropic_affinity(science_technology) We use %or% as the connector here because we’re interested in anyone who has either one of these characteristics. We now move to defining is_in_sf. We’d like to look for anyone who lives or works in San Francisco: is_in_sf = lives_in_msa(san_francisco) %or% works_in_msa(san_francisco) We are now able to create our full definition by combining the pieces: event_prospect = has_tech_interest %and% is_in_sf 5.3 Send the definition to the CDW As we discussed in the previous section, now that we have an official definition we can send it to the data warehouse, and see if the data warehouse finds anyone who fits. You can see the definition for yourself by just typing the name of it, though it is now written in a language for the computer to understand and may look intimidating to us humans: event_prospect ## LISTBUILDER DEFINITION (type: entity_id) ## . operator (TU80): intersect ## . left (TU80): ## . . operator (TW39): union ## . . left (TW39): ## . . . source: d_bio_interest_mv.entity_id (entity_id) ## . . . logic: interest_code IN (&#39;TEC&#39;) ## . . right (TW39): ## . . . source: d_oth_phil_affinity_mv.entity_id (entity_id) ## . . . logic: ## . . . . other_affinity_type IN (&#39;ST&#39;) ## . . . . sum(gift_amt) &gt;= 0.0 ## . right (TU80): ## . . operator (CG83): union ## . . left (CG83): ## . . . source: d_bio_address_mv.entity_id (entity_id) ## . . . logic: ## . . . . geo_metro_area_code IN (&#39;41860&#39;) ## . . . . addr_type_code IN (&#39;H&#39;) ## . . . . contact_type_desc IN (&#39;ADDRESS&#39;) ## . . right (CG83): ## . . . source: d_bio_address_mv.entity_id (entity_id) ## . . . logic: ## . . . . geo_metro_area_code IN (&#39;41860&#39;) ## . . . . addr_type_code IN (&#39;B&#39;) ## . . . . contact_type_desc IN (&#39;ADDRESS&#39;) In order to send the definition to the data warehouse, retrieve the results, and show them to us, we use the display function: display(event_prospect) ## # A tibble: 742 x 1 ## entity_id ## &lt;dbl&gt; ## 1 529 ## 2 616 ## 3 1969 ## 4 3422 ## 5 5280 ## 6 5573 ## 7 5833 ## 8 6622 ## 9 6886 ## 10 9783 ## # ... with 732 more rows Of course, we are probably interested in exporting this savedlist to a file, so that we might load it into CADS and run CADSmart reports on it. Conveniently, we can just do that by adding a filename: display(event_prospect, file = &quot;sf-tech-prospects&quot;) Now when I look over at my working directory, there’s a new file called sf-tech-prospects.csv "],
["working-with-widgets.html", "6 Working with widgets 6.1 Finding widgets 6.2 Codes and synonyms 6.3 Synonym search 6.4 Use the default cases 6.5 Detailed controls", " 6 Working with widgets So far, we’ve used widgets in some simple examples. In this section, we’ll explore widgets in some more detail. As always, we’ll begin by loading the discoveryengine: library(discoveryengine) 6.1 Finding widgets There are two main ways to find widgets. The first is to use the show_widgets function. The function takes no arguments. When you run it, an interactive list of widgets, with short descriptions of each, will appear in your viewer window: show_widgets() You can browse the entire listing, or use the search bar at the top right to search for specific widgets. The second way to search for widgets is to use the widget_for function. This function takes as an argument a search term, and finds all widgets that are related to that search term. For example: widget_for(&quot;giving&quot;) ## fund_area: ## Find funds with a particular area of giving code (type: allocation_code) ## fund_department: ## Find funds with a particular department code (type: allocation_code) ## fund_miner: ## Entities who gave to funds that match a keyword search (type: entity_id) ## fund_text_contains: ## Funds with notes/biographies that contain the specified search string(s) (type: allocation_code) ## fund_type: ## Find funds with a particular fund type code (type: allocation_code) ## gave_to_area: ## Lists entities who gave to specific areas with minimum giving and specific date range (type: entity_id) ## gave_to_department: ## Lists entities who gave to specific departments with minimum giving and specific date range (type: entity_id) ## gave_to_fund: ## Entities who have given to specified funds (type: entity_id) ## gave_to_fund_type: ## Entities who have given to specific types of funds (type: entity_id) ## has_philanthropic_affinity: ## Lists entities with philanthropic affinity(ies) (type: entity_id) Once you’ve found the widget you’re looking for, you can get additional information using R’s built-in help system. Just type a question mark followed by the name of the widget, e.g. ?gave_to_area. 6.2 Codes and synonyms You may have noticed in previous examples that widgets work with exact codes, such as in_unit_portfolio(BU) or with synonyms, such as in_unit_portfolio(business). Synonyms will always be in lower-case, and may include any letter of the alphabet or the underscore “_&quot; character, and nothing else. Use whichever feels more comfortable – there is no advantage to using codes vs. synonyms, though I personally find the synonyms easier to read and understand later on. 6.3 Synonym search If you’re not sure of the code or synonym to use, try out the synonym search feature that works with most widgets. Instead of entering a code (in_unit_portfolio(BU)) or synonym (in_unit_portfolio(business)), enter a question mark followed by a search string: in_unit_portfolio(?business) ## synonym code ## business BU You can enter partial terms: in_unit_portfolio(?sci) ## synonym code ## lawrence_hall_of_science LH ## neuroscience_institute NS ## qb3_quantitative_biosciences QB ## letters_science LS ## greater_good_science_center GG ## letters_and_science LS ## neuroscience NS ## quantitative_bioscience QB ## quantitative_biosciences QB And even multiple search terms: in_unit_portfolio(?bus, ?chem, ?public) ## synonym code ## business BU ## chemistry CH ## public_health PH ## communications_public_affairs PA ## public_policy PP Widgets can always accept multiple codes/synonyms as arguments, and even combinations of the two: gave_to_area(business) would find anyone who has given to the school of Business gave_to_area(business, chemistry) would find anyone who has given to Business or to Chemistry gave_to_area(HSB, COC) is the same as above gave_to_area(business, COC) once again, the same thing 6.4 Use the default cases So by now you can probably figure out that partcipated_in(uc_jazz_ensembles) gets you alumni who participated in the UC Jazz Ensembles. But what if you’re actually looking for people who particpated in any student activity at all? Would you have to type out all (hundreds!) of them? Luckily, no! In fact, all you have to do is type participated_in(): did_anything = participated_in() display(did_anything) ## # A tibble: 211,397 x 1 ## entity_id ## &lt;dbl&gt; ## 1 479293 ## 2 978671 ## 3 698424 ## 4 882164 ## 5 378663 ## 6 642319 ## 7 645485 ## 8 583924 ## 9 3063211 ## 10 790879 ## # ... with 211,387 more rows That seems a bit magical, doesn’t it? The reason that works is because every widget has a defined behavior for when no codes/synonyms are entered. These default behaviors aim to be sensible so that you can use them in an intuitive way. You can always find out exactly what is included in the default by using the help. For instance, by typing ?has_capacity I find out that entering has_capacity() without any specific ratings will find anyone with a researched capacity rating between 1 and 14 (so 99’s are excluded, and those with no capacity ratings are excluded). 6.5 Detailed controls We saw above that gave_to_area(business) will find people who have given to the Haas School of Business. By default, this will find anyone who has ever given any amount, at any time. But gave_to_area, like many widgets, has a number of optional arguments that allow more fine-grained control. For example: gave_to_area(business, at_least = 10000): finds anyone who has given at least $10,000 lifetime to the school of Business. gave_to_area(business, at_least = 10000, from = 20160101): finds anyone who has given at least $10,000 to Business since the beginning of 2016. gave_to_area(business, at_least = 10000, from = 20150101, to = 20151231): finds anyone who gave at least $10,000 to Business between January 1, 2015 and December 31, 2015. gave_to_area(business, from = 20150101, to = 20151231): finds anyone who gave anything at all to the school of Business between January 1, 2015 and December 31, 2015 As you can see, you can pick and choose which optional arguments you want to use. To find out all of the possible controls for a widget, use the built in help. For example, type ?gave_to_area. "],
["combining-widgets.html", "7 Combining widgets 7.1 Example", " 7 Combining widgets As flexible as individual widgets are, they won’t help you too much by themselves. What makes them really useful is that they can be combined. There are three ways to combine widgets: %and% will look for entities who satisfy both widgets %or% will look for entities who satisfy at least one of two widgets %but_not% will look for entities who satisfy a widget but do not satisfy a second widget. Some quick examples: gave_to_area(art_museum) %and% gave_to_area(cal_performances) finds anyone who has given to both the Art Museum and Cal Performances. gave_to_area(art_museum) %or% gave_to_area(cal_performances) finds anyone who has ever given to either the Art Museum or to Cal Performances. Note that this would include everyone who was found in the previous (%and%) example, as well as those who only gave to one or the other area. gave_to_area(art_museum) %but_not% gave_to_area(cal_performances) finds anyone who has given to the Art Museum but has not given to Cal Performances. 7.1 Example You’re working with a major gift officer in the School of Business who is surprised to find out that alumni have been giving $15,000+ gifts in response to annual appeals, with no follow-up from major gift officers. She calls you up and says: I need to a report on everyone who has given $15,000 or more this year who isn’t yet in a portfolio, and I need it right away! You could probably have a savedlist ready before she’s even hung up the phone: important_prospects = gave_to_area(business, at_least = 15000, from = 20160101) %but_not% in_unit_portfolio(business) display(important_prospects) ## # A tibble: 74 x 1 ## entity_id ## &lt;dbl&gt; ## 1 878167 ## 2 741407 ## 3 433145 ## 4 23984 ## 5 3106890 ## 6 1008005 ## 7 612156 ## 8 3152758 ## 9 3083791 ## 10 21159 ## # ... with 64 more rows "],
["brainstorm-bot.html", "8 The Brainstorm Bot 8.1 Search features", " 8 The Brainstorm Bot # as always, i have to make sure the disco engine is loaded library(discoveryengine) At this point, you’re pretty empowered to search through the database for all sorts of prospects, provided you know something about the codes in the database. Even if you don’t know the exact code for, say, basketball, you can use the synonym search feature because you know which widget to use: played_sport(?basketball) ## synonym code ## basketball_men MABB ## basketball_women WABB ## cal_basketball_club RSBK But now imagine someone has asked you for a list of people interested in robotics. Where would that be coded? Perhaps in multiple places? How can you find out? Enter the brainstorm bot. The brainstorm bot is a robot that is knowledgeable about the code tables in CADS. Let’s ask it about robotics: brainstorm_bot(&quot;robotics&quot;) ## has_interest ## ROB: Robotics ## participated_in ## ENRO: Cal Robotics Hey brainstorm bot, thanks for the ideas! The results show the name of a widget, along with the codes that are of interest, along with their description from the CADS code tables, so you can decide if they are appropriate for your project. You can then copy and paste to build up the right population: display(has_interest(ROB)) ## # A tibble: 1 x 1 ## entity_id ## &lt;dbl&gt; ## 1 470691 If it turns out you agree with every one of the brainstorm bot’s suggestions, then you don’t even have to copy and paste, because (surprise!) the brainstorm bot is actually giving you a fully filled out widget: # if i wanted robotics fans in the san francisco MSA prospects = brainstorm_bot(&quot;robotics&quot;) %and% lives_in_msa(san_francisco) display(prospects) ## # A tibble: 5 x 1 ## entity_id ## &lt;dbl&gt; ## 1 718587 ## 2 749416 ## 3 823913 ## 4 875964 ## 5 824900 8.1 Search features The brainstorm bot understands wildcards at the beginning and/or ending of your search term: brainstorm_bot(&quot;robot*&quot;) ## attended_event ## 6724: Haas East Bay Chp Robotic Event 06-18-14 ## has_interest ## ROB: Robotics ## participated_in ## ENRO: Cal Robotics ## UROB: Robotmedia Presents It also will do multiple searches at once: brainstorm_bot(&quot;robot*&quot;, &quot;data science&quot;) ## attended_event ## 6724: Haas East Bay Chp Robotic Event 06-18-14 ## gave_to_department ## DT: Berkeley Institute for Data Science ## has_interest ## DAT: Data Science ## ROB: Robotics ## majored_in ## 2E0: Master of Information &amp; Data Science ## participated_in ## ENRO: Cal Robotics ## UROB: Robotmedia Presents "],
["matrix-bot.html", "9 The Matrix Bot 9.1 Introduction 9.2 What it is 9.3 Example 9.4 Botstrapping 9.5 How does it work?", " 9 The Matrix Bot 9.1 Introduction # as always, i have to make sure the disco engine is loaded library(discoveryengine) The brainstorm bot is powered by a simple text search of our code tables. It relies on your search term appearing in the description of a particular code. That’s similar to the sort of search you might encounter on a library website that looks for exact text matches to your search term in the title and perhaps keywords associated with a book. But what if there are relevant facts about (for example) a student activity that are not captured in its name? As a concrete example, if your definition includes music majors, it’s possible (depending on your goals) that you’d also want to take a look at people who had participated in the student group CNMAT, which stands for “Center for New Music and Audio Technologies.” But how would you find that? The student activity code for CNMAT is LSCN, and the description that appears in the code table is “CNMAT Users Group.” We don’t store longer descriptions or other metadata about student groups the way we do with allocations (which allows us to do in-depth searches of fund terms and biographies). The word “music” does not appear in the code table entry for CNMAT, and so this code would slip by both the synonym search and the Brainstorm Bot search. Just when we’re about to lose hope, enter the Matrix Bot. Whoa 9.2 What it is The Matrix Bot analyzes an existing Disco Definition and looks for additional codes that might be related. It’s a good way to broaden your search when you’re doing open-ended prospecting. If the Brainstorm Bot is like looking up a book in the card catalog, then the Matrix Bot is like walking through the stacks to the shelves where your book is located, and glancing at all of other books that have been shelved in the same general location. Note that you have to provide it with a Disco Engine definition to start (unlike the Brainstorm Bot, which only requires one or more search terms). 9.3 Example We’re interested in finding musicians, so we start with music majors: is_musician = majored_in(music) But, since this is an open-ended prospecting project, we call up the Matrix Bot to widen the net: matrix_bot(is_musician) ## gave_to_department ## MUS: Music ## JAZZ: Jazz Ensembles ## YMP: Young Musicians Program ## AH: Arts &amp; Humanities ## UCCE: Choral Ensembles ## has_affiliation ## MLS1: Chamber Chorus ## MLS3: Symphony Orchestra ## MLS2: University Chorus ## RC35: CAA Cal Band Alumni Association ## has_interest ## MUS: Music ## majored_in ## 579: Music ## participated_in ## LSCN: CNMAT Users Group ## LSNM: Berkeley New Music Project ## LSRE: Repercussions Music Journal ## UMUC: Music Connection ## MSJZ: UC Jazz Ensembles ## URRR: Raza Recruitment &amp; Retention Center ## MSMB: UC Marching Band Member ## MSCH: UC Choral Ensembles As you can see, the Matrix Bot discovered a number of additional avenues for prospecting! As with the Brainstorm Bot, the Matrix Bot results are best thought of as suggestions for further research: not all of the suggestions will be helpful for your particular project, and the best way to proceed is to research and learn more about the codes it suggests, to see if they are relevant to your project. 9.4 Botstrapping Recall that the brainstorm bot returns a valid Disco Engine definition (more precisely, it returns the result of combining all of its suggestions using %or%). While we don’t often use that fact (it’s much more common to find yourself copying/pasting from the brainstorm bot results to select the widgets you want to use), it does lend to itself to a nice trick. We can use the matrix bot on brainstorm bot results to quickly and effortlessly identify a number of prospecting options. For example, if we’re prospecting for the Chicano Studies department, but don’t have a great idea where to start: # i use the wildcard * to search for both &quot;chicano&quot; and &quot;chicana&quot; matrix_bot(brainstorm_bot(&quot;chican*&quot;)) ## gave_to_department ## CHICANO: Chicano Studies Program ## MSGC: Multiculture, Sex &amp; Gender Ctrs ## ETHNIC: Ethnic Studies ## TRSP: Transfer/ReEntry/Parent Ctr ## SAGE: SAGE Scholars Program ## CEEE: Educ Equity &amp; Excellence Centers ## VCEIO: Equity &amp; Inclusion: VC&#39;s Office ## SLC: Student Learning Center ## CLL: Campus Life/Leadership ## CEP: Educational Partnerships Center ## PDP: Professional Develpmt Pgm ## OGB: Order of the Golden Bear ## SW: Social Welfare ## has_affiliation ## RC15: CAA Chicano Latino Alumni Assoc Nor Cal ## RC5: *CAA La Raza Alumni Club-Defunct ## MA17: TAAP/KASP Scholarship Interviewer ## MA5: CAA Student Recruitment/Outreach Pgm ## has_interest ## MEX: Mexican-American/Chicano Interest ## USL: U.S. Latino Interests ## LAT: Latin American Interests ## majored_in ## 160: Chicano Studies ## 919: Spanish Option D: Hispanic ## 360: Ethnic Studies ## 907: Spanish Option C2: Latin American ## 9A1: Gender &amp; Women&#39;s Studies ## 498: Latin American Studies ## 882: Spanish ## 045: American Studies ## participated_in ## LSCI: Chicano Studies Undergrad Assoc ## EDCH: Chicano Latina Arch Stdnt Assn ## LSCL: Chicano/Latino Political Sci Assoc ## UCHE: Chicano/Latinos In Health Education ## UMEC: Movimiento Estud Chicano de Aztlan ## GLTA: Lambda Theta Alpha Latin Sorority ## UMAL: Mujeres Activas En Letras (MALCS) ## UXIN: Xinaxtli ## ULPL: Latino Pre-Law Society ## ULV: La Voz ## UTRE: TRENZA ## GLTP: Lambda Theta Phi Latin Fraternity ## UHAU: Hermanas Unidas ## ULAS: Latin American Student Association ## GLTN: Lambda Theta Nu Sorority ## UHSF: Hispanic Scholarship Fund Scholars ## GGZA: Gamma Zeta Alpha ## UGFR: Grupo Folklorico Reflejos De Mexico ## GSPA: Sigma Pi Alpha Sorority ## UMCH: MEChXA ## UHU: Hermanos Unidos ## UESIT: Summer Abroad - Italy ## UDUL: DULCE-Cmnty Diabetes Educ &amp; Prev ## UYQU: Young Queers United 4 Empow (Y Que) ## UEGI: Global Internship ## ULF: La Familia ## URRR: Raza Recruitment &amp; Retention Center ## BULS: Latino Business Student Association ## URS: RISE-Rising Immigrant Sch Thru Educ ## UHES: Hispanic Engineers &amp; Scientists ## UIAM: IAM Outreach Program ## UESMX: Summer Abroad - Mexico ## ULL: La Llorona ## UDCP: Destination: College Program ## EAMEX: Education Abroad Program - Mexico ## EID1: DC Advising Corps ## EABRA: Education Abroad Program - Brazil ## RHRV: Rochdale Village Co-Op Resident ## LWLS: La Raza Law Students Association ## UBUI: BUILD Literacy Program ## EIP1: PDP Calculus Intensive ## EIR6: TRSP Transfer Student Services ## LRAC: La Raza Alumni Chapter ## USBR: Summer Bridge Program Participant ## LTAD: Latino Alumni Directory ## EIT: TAP Transfer Alliance Project ## EISA: Educational Opportunity Program ## UESSP: Summer Abroad - Spain ## LWLR: Berkeley La Raza Law Journal ## UBON: Bonner Leaders ## RHFW: Fenwick Weavers&#39; Village Co-Op 9.5 How does it work? The Matrix Bot looks up entities who match your definition, and then looks for other characteristics they have in common. The theory is that if a lot of people who have characteristic A (example: majored in music) also happen to have characteristic B (participated in CNMAT Users Group), then there’s probably an underlying similarity between characteristic A and B. This approach is closely related to one laid out in the paper “The Duality of Persons and Groups” by Ronald Breiger. The name “Matrix Bot,” in addition to evoking some Neo-like magic, is also a nod to the basic linear algebra that the bot uses. "],
["higher-order-widgets.html", "10 Higher order widgets 10.1 Children of wealth", " 10 Higher order widgets You may have noticed when we ran the show_widgets() function in working with widgets that there is a mysterious “Order” column that categorizes widgets as either “first-order” or “second-order”. What’s that all about? In order to answer that, let’s take a look at another example. 10.1 Children of wealth Many alumni in our database do not have capacity ratings, but come from wealthy families. This would be nice to be aware of if they were ever being solicited. But how could we identify these “children of wealth” using the discovery engine? It’s pretty easy to find wealthy individuals: # as always, i make sure the disco engine is loaded library(discoveryengine) # i&#39;ll define wealthy as a capacity of $1 Million+ wealthy = has_capacity(1:7) But now I’m stuck. I want to find children of anyone on that list. But so far all of the widgets we’ve seen work with specific codes, not other widgets. Technically, all the widgets we’ve seen are first-order widgets. But we do have some widgets that, instead of working on one or more specific codes, works on an existing, already filled out widget. child_of is one such second-order widget: child_of_wealth = child_of(wealthy) display(child_of_wealth) ## # A tibble: 1,024 x 1 ## entity_id ## &lt;dbl&gt; ## 1 501819 ## 2 633358 ## 3 3009776 ## 4 684446 ## 5 30621 ## 6 731797 ## 7 325782 ## 8 734035 ## 9 31566 ## 10 26435 ## # ... with 1,014 more rows Though the syntax looks just like what we’ve been doing all along, note that wealthy in the above is not a code or synonym, but instead is the name that I gave to the definition has_capacity(1:7). This makes child_of very different from other widgets we’ve seen so far. As we’ll see in the next seciton, the ability to use second-order widgets allows us to do some very powerful things. The result of using a second-order widget, though, is just like using any other widget. You can continue to combine it with other widgets: display(child_of_wealth %and% lives_in_msa(san_francisco)) ## # A tibble: 448 x 1 ## entity_id ## &lt;dbl&gt; ## 1 501819 ## 2 731797 ## 3 325782 ## 4 415779 ## 5 30775 ## 6 30776 ## 7 459195 ## 8 28210 ## 9 21477 ## 10 433145 ## # ... with 438 more rows # or even display( child_of(child_of_wealth) ) ## # A tibble: 118 x 1 ## entity_id ## &lt;dbl&gt; ## 1 684446 ## 2 1002656 ## 3 499074 ## 4 3211635 ## 5 945146 ## 6 509691 ## 7 3162983 ## 8 734034 ## 9 916909 ## 10 742372 ## # ... with 108 more rows "],
["non-entity-widgets.html", "11 Non-entity widgets 11.1 Motivation 11.2 Disco Definition Types 11.3 Searching fund text 11.4 From funds to entities 11.5 “Converters”", " 11 Non-entity widgets 11.1 Motivation In CADSmart, there is a report called the Fundfinder, which allows you to search for allocations that contain specific words or phrases in the name, fund terms, or fund biography. A natural application is to use the report to find some allocations, and then turn around and get a list of entities who have given to those funds. So far, we haven’t seen how to do that in the disco engine, but that’s about to change. Before reading this section, make sure you understand higher order widgets. 11.2 Disco Definition Types Let’s take a closer look at a widget we’ve already used a lot, the has_capacity widget. In particular, let’s look at the definition that gets created when we use has_capacity: has_capacity(1) ## LISTBUILDER DEFINITION (type: entity_id) ## . source: d_entity_mv.entity_id (entity_id) ## . logic: capacity_rating_code IN (1) See in parentheses in the first line where it says type: entity_id? So entity_id is the “type” of the definition we’ve created. And as you may have guessed by now, we can also create other types of definition! 11.3 Searching fund text The Fundfinder report does not give you a list of entities, it gives you a list of allocations. You are then expected to use a different report to find donors to those allocations. We’ll follow a similar (but hopefully more convenient) strategy with the disco engine. We start by using fund_text_contains to do a text search of fund terms/biographies/names (for more info, check the help file by typing ?fund_text_contains). fund_text_contains, like all text-searching tools in the discoveryengine, allows you to enter as many search terms as you like, and to use wildcards (*): # let&#39;s look for funds that support diversity/underrepresented students diversity_funds = fund_text_contains(&quot;divers*&quot;, &quot;underrepresented&quot;) The definition looks pretty complex, but notice that first line – this time around, instead of entity_id, we have type: allocation_code: diversity_funds ## LISTBUILDER DEFINITION (type: allocation_code) ## . operator (OI64): union ## . left (OI64): ## . . source: f_allocation_mv.allocation_code (allocation_code) ## . . logic: REGEXP_LIKE(long_name, &#39;((^|\\\\s|\\\\W)divers)|((^|\\\\s|\\\\W)underrepresented($|\\\\s|\\\\W))&#39;, &#39;i&#39;) ## . right (OI64): ## . . operator (IA60): union ## . . left (IA60): ## . . . operator (RJ90): union ## . . . left (RJ90): ## . . . . source: f_notes_mv.allocation_code (allocation_code) ## . . . . logic: ## . . . . . REGEXP_LIKE(description, &#39;((^|\\\\s|\\\\W)divers)|((^|\\\\s|\\\\W)underrepresented($|\\\\s|\\\\W))&#39;, &#39;i&#39;) ## . . . . . note_type IN (&#39;FT&#39;, &#39;FB&#39;) ## . . . right (RJ90): ## . . . . source: f_notes_mv.allocation_code (allocation_code) ## . . . . logic: ## . . . . . REGEXP_LIKE(brief_note, &#39;((^|\\\\s|\\\\W)divers)|((^|\\\\s|\\\\W)underrepresented($|\\\\s|\\\\W))&#39;, &#39;i&#39;) ## . . . . . note_type IN (&#39;FT&#39;, &#39;FB&#39;) ## . . right (IA60): ## . . . source: f_notes_mv.allocation_code (allocation_code) ## . . . logic: ## . . . . REGEXP_LIKE(note_text, &#39;((^|\\\\s|\\\\W)divers)|((^|\\\\s|\\\\W)underrepresented($|\\\\s|\\\\W))&#39;, &#39;i&#39;) ## . . . . note_type IN (&#39;FT&#39;, &#39;FB&#39;) And in fact, if we run display, we’ll see a list of allocation codes instead of the entity IDs that we’ve seen in previous examples: display(diversity_funds) ## # A tibble: 208 x 1 ## allocation_code ## &lt;chr&gt; ## 1 FB0807000 ## 2 FM8294000 ## 3 FN1251000 ## 4 FN1252000 ## 5 FN1271000 ## 6 FN1286000 ## 7 FN1551000 ## 8 FN3235000 ## 9 FN3251000 ## 10 FN3252000 ## # ... with 198 more rows 11.4 From funds to entities If all you needed to do was get a list of allocation codes for your own research, then congrats, you’re done! But what if you want to take the next step, and find donors to those funds? You use one of the tools to find widgets to discover the gave_to_fund widget (read more at ?gave_to_fund). Though it looks on the surface pretty similar to gave_to_area and gave_to_department, it is in fact one of those second-order widgets! # gave_to_fund has the same interface/options # as gave_to_area and gave_to_department. diversity_donors = gave_to_fund(diversity_funds, at_least = 10000, from = 20150101, to = 20151231) display(diversity_donors) ## # A tibble: 27 x 1 ## entity_id ## &lt;dbl&gt; ## 1 867 ## 2 10469 ## 3 12100 ## 4 16607 ## 5 21393 ## 6 22653 ## 7 23207 ## 8 24473 ## 9 27771 ## 10 28097 ## # ... with 17 more rows 11.5 “Converters” Examples like this one show how higher-order widgets can act as “converters,” converting one type of definition (like allocation_code) to another (like entity_id). This is a handy idea to have in the back of your mind. If you find yourself with an ID list definition that has the wrong type of ID, see if you can find a second-order widget that will “convert” it to the right type. "],
["optional-arguments.html", "12 Optional arguments 12.1 Event invitees and attendees 12.2 Date ranges 12.3 Graduate, undergraduate, attendee 12.4 Workarounds: inactive only", " 12 Optional arguments As we saw in Working with widgets, many widgets have optional arguments that provide fine-grained control. You can always view the full documentation for a widget, including all of its arguments, by using the built-in help (e.g. ?majored_in). We are able to make these arguments optional because widgets come pre-configured with default settings for these arguments (the default settings are also explained in the help). 12.1 Event invitees and attendees For example, absent any additional instructions, attended_event will exclude anyone who was invited but did not attend the specified events. So to create a definition of people who attended CNR’s “Re-discover ESPM” event: attended_event(2770) ## LISTBUILDER DEFINITION (type: entity_id) ## . source: d_bio_activity_mv.entity_id (entity_id) ## . logic: ## . . activity_code IN (&#39;2770&#39;) ## . . activity_participation_code IN (&#39;P&#39;, &#39;ST&#39;, &#39;SP&#39;, &#39;V&#39;, &#39;H&#39;, &#39;S&#39;, &#39;C&#39;, &#39;KN&#39;, &#39;MD&#39;, &#39;E&#39;) Since I did not specify otherwise, that definition will only pull in those who actually attended, not those who were merely invited. If I were interested not only in those who actually attended, but also anyone who was merely invited (this can be useful because it indicates that a person was at least considered an invite-worthy prospect), I would add include_non_attendees = TRUE to my specification: attended_event(2770, include_non_attendees = TRUE) ## LISTBUILDER DEFINITION (type: entity_id) ## . source: d_bio_activity_mv.entity_id (entity_id) ## . logic: ## . . activity_code IN (&#39;2770&#39;) ## . . activity_participation_code IN (&#39;P&#39;, &#39;ST&#39;, &#39;SP&#39;, &#39;V&#39;, &#39;H&#39;, &#39;S&#39;, &#39;C&#39;, &#39;KN&#39;, &#39;MD&#39;, &#39;E&#39;, &#39;ID&#39;, &#39;RG&#39;, &#39;NS&#39;) If you look closely at the printed output from each of those defintions, in the logic section, you’ll notice slightly different lists of codes included where it says activity_participation_code IN .... In fact, the latter includes the extra codes ID (for “Invited but did not attend”), RG (“Regrets”), and NS (“No Show”). 12.2 Date ranges A number of widgets, including all of the giving-related widgets as well as degree/major widgets, have two optional arguments, called from and to, to specify a date range. Their being optional means that you can specify none, just one, or both of the from and to arguments, resulting in the following behaviors: None: Dates will not be considered at all. So for example, gave_to_area(chemistry) will look at people’s entire lifetime of giving for any gifts to the College of Chemistry Only from: The date range will be considered open-ended on the right (future) side, but closed on the left (past). So gave_to_area(chemistry, from = 20010101) will look for anyone who has given to the College of Chemistry since the beginning of the year 2001, ignoring any giving that happened earlier than that. Only to: The date range will be considered open-ended on the left (past), but closed on the right (future). So gave_to_area(chemistry, to = 20080630) will consider any giving on or before June 30, 2008, ignoring any giving that happened after that date. Both: Just a daterange. gave_to_area(chemistry, from = 20010101, to = 20080630) will look for giving to the College of Chemistry between January 1, 2001 and June 30, 2008. 12.3 Graduate, undergraduate, attendee For the most part, widgets have just a small number of options, and they are designed to be easy to get your head around. Should we include inactive records, yes or no? That kind of thing. majored_in and has_degree_from are two widgets that have a somewhat more complex set of possibilites, arising from the fact that we can pull degreeholders or attendees, graduates or undergraduates. We’ll look at some examples: majored_in(womens_studies): By default, we look for both graduate and undergraduate degreeholders. Only those who completed a degree in Women’s Studies will be included. majored_in(womens_studies, attendees = TRUE): By adding attendees = TRUE, we include any attendee, undergraduate or graduate, in addition to the degreeholders. majored_in(womens_studies, undergraduates = FALSE, attendees = TRUE): Here we’re only interested in graduate-level Women’s Studies majors. We’ll ignore undergraduate degreeholders, and, importantly, we’ll also ignore undergraduate attendees. We’ll include anyone who studied Women’s Studies at the graduate level, whether or not they earned a degree. Though it has the same meaning and will have the same results, in cases like this it’s helpful to be explicit so you don’t get confused later: majored_in( womens_studies, undergraduates = FALSE, graduates = TRUE, # not necessary (it&#39;s TRUE by default), but more clear attendees = TRUE ) To get any type of attendee, but ignore degreeholders: majored_in( womens_studies, undergraduates = FALSE, graduates = FALSE, attendees = TRUE ) 12.4 Workarounds: inactive only Sometimes the simplicity of a widget interface can make it seem insufficiently flexible. For example, what if we wanted to look at only people who were once in a library portfolio, but no longer are? By looking at ?in_unit_portfolio, I can see that the unit portfolio widget has an option include_inactive which is FALSE by default, but there is no include_active or any such option. I can do in_unit_portfolio(library, include_inactive = TRUE), but that will include people who are still in a Library portfolio. In order to get around this limitation, I’ll have to get a little creative. I’ll pull anyone in the library portfolio, whether active or inactive, but then I’ll exclude those who are only in an active portfolio: # first define what it means to have ever been in a library portfolio current_or_former = in_unit_portfolio(library, include_inactive = TRUE) # now define being in a &quot;current&quot; portfolio # note that include_inactive = FALSE is not necessary here, # since that is the default setting for that argument, but # i include it here because it makes my intent more clear current = in_unit_portfolio(library, include_inactive = FALSE) # to find only the former portfolio: former = current_or_former %but_not% current This little trick is similar to the one we use in the LYBUNT example. "],
["ex-political-economy.html", "13 Political economy list", " 13 Political economy list Here’s the request: Can you please generate a prospect list for me that includes econ, political economy, poli sci and business grads. And also include donors to Haas Center, Goldman School and CEGA? I start with the part I already know – business grads. library(discoveryengine) is_business_grad = has_degree_from(business) I believe Economics, Political Economy, and Political Science are all majors. I don’t know major codes, but most widgets have a built-in lookup feature: majored_in(?econ) ## synonym code ## pol_econ_of_indust_soc 697 ## urban_secondary_english 24903 ## political_economy 2B2 ## pol_econ_of_nat_resources 698 ## economics 246 ## agricultural_economics 024 ## economics_ma_jd 246501 ## environmental_econ_policy 779 ## household_arts_home_economics 373X ## law_jd_econ_ma 501246 ## agricultural_resource_economics 034 Ok, looks like economics and political_economy should definitely be included. What about political science? majored_in(?political) ## synonym code ## political_economy 2B2 ## political_science 699 So now I have what I need for the other graduates: is_poli_econ_grad = majored_in(political_science, political_economy, economics) Now I need to find donors to the Haas Center, Goldman School, and CEGA. Some follow-up clarified that the “Haas Center” here is referring to the Haas Institute for a fair and inclusive society . I don’t know if that is an area of giving, a department, a fund? So I use the brainstorm bot. From experience, I know that “institute” sometimes appears in CADS as the full word “institute” and is sometimes abbreviated to something like “inst.” I’ll use the wildcard (*) ability in the brainstorm bot to make sure I capture all possibilities: brainstorm_bot(&quot;haas inst*&quot;) ## attended_event ## 2843: Haas Institutional Analysis Workshop ## 4340: Haas Institutional Analysis Workshop ## gave_to_department ## HDRC: Haas Inst/Fair &amp; Inclusive Soc ## has_affiliation ## BUA18: Haas Inst of Mgmt, Innovation &amp; Org IMI ## BUBSI: Haas Institute for Bus &amp; Social Impact ## BUIBI: Haas Institute for Business Innovation Ah ha! It’s the department. is_haas_ctr_donor = gave_to_department(HDRC) CEGA is the “effective global action center.” Once again, I’ll ask the brainstorm bot for suggestions: brainstorm_bot(&quot;global action&quot;) ## gave_to_department ## CEGA: Effective Global Action Center is_cega_donor = gave_to_department(CEGA) I already happen to know that the Goldman School is an area of giving, so: is_goldman_donor = gave_to_area(public_policy) The request was for people who meet any of the given criteria, so I’ll use %or% to combine them: prospect_list = is_business_grad %or% is_poli_econ_grad %or% is_haas_ctr_donor %or% is_cega_donor %or% is_goldman_donor display(prospect_list) ## # A tibble: 83,461 x 1 ## entity_id ## &lt;dbl&gt; ## 1 2 ## 2 5 ## 3 13 ## 4 16 ## 5 28 ## 6 51 ## 7 78 ## 8 81 ## 9 98 ## 10 109 ## # ... with 83,451 more rows "],
["ex-lybunt.html", "14 LYBUNTs", " 14 LYBUNTs # i always begin by loading the disco engine if it isn&#39;t already loaded library(discoveryengine) Anyone involved in an annual solicitation cycle will have some interest in the population referred to as LYBUNT, which stands for Last Year But Not This Year. That is, someone who gave last year but has not given this year. How can we create such a definition in the Disco Engine? To make the example concrete, let’s say we’re identifying LYBUNTs for the school of Social Welfare. What I’d like to get to is: LYBUNT = last_year %but_not% this_year So, all I really need to do is define last_year and this_year. I’m writing this example in September, 2016, so I’ll define “last year” as FY2015-16, or in other words, July 1, 2015 - June 30, 2016: last_year = gave_to_area(social_welfare, from = 20150701, to = 20160630) And now for this year. Since the to argument is optional, I can just do: this_year = gave_to_area(social_welfare, from = 20160701) Now I can create my LYBUNT definition, as I strategized above: LYBUNT = last_year %but_not% this_year display(LYBUNT) ## # A tibble: 433 × 1 ## entity_id ## &lt;dbl&gt; ## 1 448 ## 2 500 ## 3 548 ## 4 3408 ## 5 8181 ## 6 9357 ## 7 9359 ## 8 9598 ## 9 9684 ## 10 10025 ## # ... with 423 more rows Finally, recall that every widget has a default set up if you don’t enter any codes. Looking at ?gave_to_area I can see that if I don’t use an area of giving codes, I just get any giving anywhere. I can use this knowledge to get campus-wide LYBUNTs: last_year = gave_to_area(from = 20150701, to = 20160630) this_year = gave_to_area(from = 20160701) LYBUNT = last_year %but_not% this_year display(LYBUNT) ## # A tibble: 63,319 × 1 ## entity_id ## &lt;dbl&gt; ## 1 3 ## 2 4 ## 3 7 ## 4 13 ## 5 16 ## 6 49 ## 7 59 ## 8 72 ## 9 94 ## 10 114 ## # ... with 63,309 more rows "],
["ex-recent-band-parents.html", "15 Recent Band Parents 15.1 Recent band members 15.2 Find their parents 15.3 Who live close enough 15.4 How many? 15.5 Householding", " 15 Recent Band Parents # always begin by loading the disco engine if it isn&#39;t already loaded library(discoveryengine) A client in Student Affairs is considering organizing a weekend event for parents of marching band members who graduated recently. They are tentatively holding the event at the Claremont Resort, but want to be sure that there are enough recent band parents who live close enough to attend. So our job is to build a definition of parents of recent band graduates who live near the Claremont Resort. Then we can just use display to view how many people fit the definition. 15.1 Recent band members First I need to find out how to identify marching band members. I’ll use the brainstorm bot: brainstorm_bot(&quot;marching band&quot;) ## participated_in ## MSMB: UC Marching Band Member Cool. So definining “recent” as anyone who graduated between 2010 and 2016: recent_band_member = participated_in(MSMB) %and% has_reunion_year(2010:2016) 15.2 Find their parents Since I’m already familiar with higher order widgets, I know what to do here: band_parent = parent_of(recent_band_member) 15.3 Who live close enough Here I’ll assume that 25 miles is about as far as we can expect one of these band parents to travel in order to attend the event. So my definition should include only those people who live within 25 miles of the Claremont Resort: event_prospect = band_parent %and% lives_near(&quot;Claremont Resort&quot;, miles = 25) ## Basing results on: Claremont Resort And Spa, Oakland, CA, USA (37.86, -122.24) ## (confidence that this is the right location: 0.903) 15.4 How many? Now I just use display and see the number of parents: display(event_prospect) ## # A tibble: 87 × 1 ## entity_id ## &lt;dbl&gt; ## 1 14999 ## 2 15672 ## 3 15687 ## 4 46204 ## 5 50302 ## 6 250310 ## 7 271059 ## 8 276471 ## 9 296428 ## 10 317956 ## # ... with 77 more rows Notice the first line, before the IDs start, tells us exactly how many individuals are on the list: 87. 15.5 Householding But hold up! Looking up some of these IDs, I’m noticing that both members of married couples are on the list. How many households are there here? I check the help for the display function by running ?display. And I notice that there is an option called household, and by default it is set to FALSE. So: display(event_prospect, household = TRUE) ## # A tibble: 48 × 1 ## entity_id ## &lt;dbl&gt; ## 1 14999 ## 2 317956 ## 3 347337 ## 4 874556 ## 5 889893 ## 6 907499 ## 7 988958 ## 8 780532 ## 9 910163 ## 10 910379 ## # ... with 38 more rows "],
["ex-near-builder.html", "16 Nearing Builder of Berkeley Status 16.1 Defining close 16.2 Householding", " 16 Nearing Builder of Berkeley Status # always begin by loading the disco engine if it isn&#39;t already loaded library(discoveryengine) A household is designated a “Builder of Berkeley” when they have donated at least $1 Million lifetime to Berkeley. That status comes with recognition and other perks, so it’s valuable to be aware of households who are nearing that level, as we can then craft solicitations that would push the household into Builder status. 16.1 Defining close For this example, I’ll use $850,000 as the definition of “close” to the $1 Million Builder level. So we’re trying to find households who have given at least $850,000, but not over $1 Million. Recall that the giving widgets, when used without any area or department codes, look at giving anywhere on campus (which is what we want). # B.O.B. is a lifetime recognition. Pull lifetime giving by not using the # date range in the gave_to_area widget nearly_builder = gave_to_area(at_least = 850000) To exclude those who are already over $1M (who are already Builders), I first need to identify them: already_builder = gave_to_area(at_least = 1000000) Now, I want to find everyone who satisfies nearly_builder but are not already_builder: prospect_list = nearly_builder %but_not% already_builder Let’s see what we have! display(prospect_list) ## # A tibble: 57 × 1 ## entity_id ## &lt;dbl&gt; ## 1 566 ## 2 1347 ## 3 8481 ## 4 8872 ## 5 9763 ## 6 10342 ## 7 10688 ## 8 12207 ## 9 15771 ## 10 17583 ## # ... with 47 more rows 16.2 Householding A lot of individuals in prospect_list are married to each other, but Builder of Berkeley is a household recognition. If I’m going to run the Prospect Pool Spreadsheet, this doesn’t really matter since that report automatically households, but otherwise I’d like to household the results (this will also help in getting an accurate count). By checking ?display I see that deceased people are removed by default (which is what I want in this case), but that householding is not done by default. To enable householding: display(prospect_list, household = TRUE) ## # A tibble: 47 x 1 ## entity_id ## &lt;dbl&gt; ## 1 9763 ## 2 508590 ## 3 8872 ## 4 15771 ## 5 132374 ## 6 420352 ## 7 653365 ## 8 1346 ## 9 10342 ## 10 22996 ## # ... with 37 more rows "],
["ex-sim-donors.html", "17 Donors who aren’t degreeholders 17.1 Why it works", " 17 Donors who aren’t degreeholders # i always begin by loading the disco engine if it isn&#39;t already loaded library(discoveryengine) We have what looks like an easy request: Find donors to the School of Information who are not SIM degree holders. Having already looked up the codes, you immediately think: gave_to_area(SIM) %but_not% has_degree_from(LI) Unfortunately, as you begin reviewing the results, you notice that you produced a list that includes spouses of degree holders who received credit for household gifts to SIM. What we actually want here is not “donors who are not degreeholders” but rather “donor households that are not degree-holding households.” Here “donor households” has the standard meaning, and “degree-holding household” means a household where at least one of the spouses has a degree. So instead: non_alum_donors = household(gave_to_area(SIM)) %but_not% household(has_degree_from(LI)) To make it even more clear what it is we’re doing with this definition, it helps to re-write it with more descriptive names: is_donor_hh = household(gave_to_area(SIM)) is_degree_hh = household(has_degree_from(LI)) non_alum_donor_hh = is_donor_hh %but_not% is_degree_hh 17.1 Why it works By householding each component of the definition before combining them with %but_not%, I am making the household the basic unit of analysis, rather than the individual. This often becomes necessary when we’re working with giving or portfolios (which we usually treat as characteristics of a household) and we want to exclude characteristics such as degree or student activity (which are characteristics of an individual). "],
["test-cdw.html", "A Test your database set up A.1 Test your connection A.2 Opening RStudio A.3 Fixing the default package installation directory A.4 Installing getcdw A.5 Testing getcdw", " A Test your database set up A.1 Test your connection First, let’s make sure your connection works. You’ll need the user name and password you received from Nancy Fan. Here are the steps to see if that connection works: Navigate to C:\\Windows\\SysWOW64. Double click odbcad32. It’s the application highlighted in the following image: You’ll now have the ODBC Data Source Administrator open. Click the “System DSN” tab and then click the “Add..” button. Scroll down to close to the bottom of the list of drivers. There you’ll find “Oracle in instantclient_11_2”. Double click this. You’ll now be in a window that asks you for some information to configure this driver. Fill out the Data Source Name as “URELUAT” and find “URELUAT” in the dropdown menu for TNS Service Name. Enter your user name (the one given to you by Nancy, which is probably the same as your CalNet ID) as the User ID. Click “Test Connection”. Enter your password (given to you by Nancy) in the Password field. Click “OK”. You should now get a pop up message letting you know that the connection was successful. Click “OK” three times to close out the ODBC Source Administrator. If you did not get this message and instead got an error message, do not continue with the rest of these instructions until your connection is successful. You may have the wrong password, or there may be other connection issues. A.2 Opening RStudio If your connection was successful, let’s move on to setting up some packages you’ll need. First, open RStudio. If you don’t have an icon on your desktop, you can find the program by searching for “rstudio” in your Start menu. You’ll also find a copy at C:\\Program Files\\RStudio\\bin. If you want a shortcut on your desktop, simply drag and drop the rstudio application. When RStudio is open, you’ll see a few different panes on the screen. The console is where you can type commands and see output. We only need to worry about the console right now. It’s this part of the screen: You also want to make sure you’re using the correct version of R. Here are the steps to do so: Go to the Tools dropdown menu at the top of the screen, and select Global Options. You’ll see a box that looks like this: The top box tells you the R version you’re using. Click on the “Change..” button and make sure “[32-bit] C:\\Program Files\\R\\R-3.3.1” is selected. It looks like this: Click “Ok” twice. You may be prompted to restart the program. If so, go ahead and do so. A.3 Fixing the default package installation directory By default, R will install packages to a local directory. While this doesn’t cause any immediate problems, it does mean that all of your packages will disappear every time IST recomposes our machines. To avoid having to re-install everything every few weeks, we can change the default package installation directory. You can do this by copying and pasting the following commands into your R console: # the first part sets up the new package directory package_dir &lt;- &quot;P:/R/win-library/packages&quot; if (!dir.exists(package_dir)) dir.create(package_dir, recursive = TRUE) # then make a configuration file that notifies R of the new package directory env_file &lt;- &quot;P:/.Renviron&quot; if (!file.exists(env_file)) file.create(env_file) # and add the new location to the configuration file cat(&quot;\\nR_LIBS_USER=&#39;&quot;, package_dir, &quot;&#39;&quot;, sep = &quot;&quot;, file = env_file, append = TRUE) # we also update the current R session about the new set up # (this is so we don&#39;t have to restart for the changes to take effect) do.call(Sys.setenv, list(R_LIBS_USER = package_dir)) # finally we update where R will look when loading a package .libPaths(package_dir) A.4 Installing getcdw Before you can install getcdw, you’ll need to install a few packages. Once again, just copy and paste the following into the console: install.packages(&quot;devtools&quot;) install.packages(&quot;dplyr&quot;, dependencies = TRUE) install.packages(&quot;S:/UR_Everyone/Rohit_Saini/ROracle/ROracle_1.2-2.zip&quot;, repos = NULL) There may be a pause for a few seconds during installation of the packages. A little stop sign will appear in the upper right corner of the console while the script is running. Once this stop sign is gone, you should get an output message that tells you that each package has been successfully unpacked and where the downloaded packages are stored. You’re now ready to move on to the next line. Now go ahead and use devtools to install getcdw. You’ll need to run this line of code: devtools::install_github(&quot;tarakc02/getcdw&quot;) You should get a message that getcdw has been installed. Again there may be a pause while the package is being installed. A.5 Testing getcdw Let’s go ahead and load the library for getcdw: library(getcdw) Copy the above into your console and press enter. It will appear that nothing happened, but that actually means everything is fine. Now all we need to do is run a simple query to test the connection. We’ll do this by entering a SQL query into the console and seeing if it returns valid data (which would mean that you are able to connect to the database). When you do so, you’ll be prompted for some information, please read the instructions below and make sure you understand what you’re supposed to enter: get_cdw(&quot;select * from dual&quot;) When you do this for the first time, you will be prompted for three pieces of information: Your “UID”: This is your username to log-in to the database. Unless you were told otherwise, this should be the same as your CalNet ID Your “PWD”: This is the password to log-in to the database. You should have received this from Nancy Fan, and it looks like a long random set of characters, numbers, and other symbols: Finally, you’ll be prompted for a “secret passphrase.” The database password is long and confusing and impossible to remember, which encourages most of us to write it down somewhere and keep it near the computer, which is insecure! So instead getcdw allows you to pick your own secret passphrase (this can be anything, from a single word to a memorable sentence, or whatever you think is easy for you to remember but not easy for someone else to guess). After this step, you will only ever be required to enter your secret passphrase – you will no longer be prompted for your database UID or PWD. If everything is working properly, you should see something like this: ## # A tibble: 1 x 1 ## dummy ## &lt;chr&gt; ## 1 X If that’s what you see, you are all set! Stay tuned for further instructions as we work to roll out the new suite of tools! "],
["cheat-sheet.html", "B Cheat Sheet B.1 Getting started B.2 Knowing about defaults B.3 Output B.4 Code lookup B.5 The best widgets for . . . B.6 Text search B.7 Other", " B Cheat Sheet B.1 Getting started Always start a session with library(discoveryengine) library(discoveryengine) Not sure where to begin? Use show_widgets() to view a searchable and sortable list of available widgets. For more tips on finding widgets, check out the section on finding widgets. Still not sure what to do? Try using the brainstorm bot. For instance if you are looking for people who played on the basketball team, type brainstorm_bot(&quot;basketball&quot;) Multiple widgets can be combined using the operators %and%, %or%, or %but_not%. For example, gave_to_area(natural_resources) %but_not% in_unit_portfolio(natural_resources) B.2 Knowing about defaults Be aware of defaults: If you’re ever wondering about any of the default settings for a widget, utilize the built-in documentation to learn more. For example: ?has_affiliation shows me that the option include_former defaults to TRUE, meaning that the has_affiliation widget will automatically include former (in addition to current) affiliations, unless you add include_former = FALSE. An incomplete list of widget options and their default settings: has_degree_from and majored_in: By default, these include undergraduate and graduate degreeholders, and exclude attendees. attended_event: By default, non-attendees (coded as “invited but did not attend”) are excluded, but can be included with include_non_attendees = TRUE has_affiliation, has_interest, and all of the employment-based widgets have an include_former option that defaults to TRUE in_unit_portfolio has an option to include_inactive that defaults to FALSE (by default, only the active proposal assignments are considered) The best way to find out options, defaults and other information about widgets is to use the built-in documentation. B.3 Output Use display for output. Recall that you can use the equals sign = to assign names to your disco engine definitions, to make it easier to refer to them when displaying or doing other operations: basketball_player = played_sport(basketball_men, basketball_women) display(basketball_player) ## # A tibble: 445 x 1 ## entity_id ## &lt;dbl&gt; ## 1 370 ## 2 1429 ## 3 1495 ## 4 3615 ## 5 4425 ## 6 5946 ## 7 6412 ## 8 6882 ## 9 7539 ## 10 7659 ## # ... with 435 more rows If instead of just viewing IDs on the screen, you’d like to export them (perhaps to use in a CADS savedlist), just add a filename: display(basketball_player, file = &quot;basketball-players&quot;) and a file called “basketball-players.csv” will appear in your working directory. Note that the exported file has a header, so when you upload it to an Advance savedlist, make sure to check the “First row is a header” box. B.4 Code lookup Most widgets rely on the coding found in CADS for their input, but you probably haven’t memorized all of the codes! By using a question-mark inside of a widget, you can do look-ups on the fly: gave_to_department(?band) ## synonym code ## cal_band CALBAND Codes (such as CALBAND) and synonyms (such as cal_band) can be used interchangeably, so use whichever feels more comfortable. B.5 The best widgets for . . . The following may be incomplete and is not a substitute for using show_widgets(), but may come in handy in a pinch. Find out more about any one of these by using the built-in help. For example, to learn more about the gave_to_area widget, type ?gave_to_area Giving widgets: gave_to_area, gave_to_department, gave_to_fund Ratings: has_capacity, has_implied_capacity, has_major_gift_score, has_gift_planning_score Academic and student experience: has_degree_from, majored_in, participated_in, played_sport, received_award UCB affiliations: has_affiliation, on_committee, received_award Interests, etc: has_interest, has_philanthropic_affinity Employment: works_in_industry, has_occupation, has_position, job_title_like Geography: lives_in_county, lives_in_msa, lives_in_zip, lives_near, works_in_county, works_in_msa, works_in_zip, works_near B.6 Text search Though most widgets rely on codes from CADS as inputs, some are search-based. Just like the brainstorm_bot, which is also based on text search, these widgets require you to use quotation marks around the search term(s). Here are some examples: contact_text_contains(&quot;neuro*&quot;, &quot;brain&quot;) fund_text_contains(&quot;diversity&quot;) research_miner(&quot;underrepresented&quot;) Note: The brainstorm_bot will help you find things through the code tables, but it will not do big text searches of things like contact reports, fund biographies/terms, and research profiles. For that kind of specialized search, you should use these text search based widgets. B.7 Other Type show_suspect_pools() to view a list of all Suspect Pools, which is useful in conjunction with the in_suspect_pool widget. "],
["how-it-works.html", "C How does it work? C.1 A Widget as a SQL template C.2 A template as a data structure C.3 Non-standard evaluation C.4 Combining simple definitions C.5 Re-visiting to_sql C.6 Seeing it all in action C.7 For further study", " C How does it work? In this section, I’ll go over the basic building blocks that make the Disco Engine work. To help organize the lesson, I’ll assume we’re building a brand new Disco Engine from scratch. Of course, what we build will necessarily be just a simplified version of the Disco Engine, but we’ll cover the most important concepts. All of the code behind the real Disco Engine is available for anyone to view on GitHub. Where possible, I’ll add a link to the appropriate bit of production code and explain what’s different from our simplified example. C.1 A Widget as a SQL template To get data from the database, the Disco Engine converts definitions into valid SQL. The key insight here is that any first-order predicate (what’s first-order mean?) can be represented in terms of a very basic SQL query, which we can turn into this all-purpose template: select distinct ID_FIELD as ID_TYPE from TABLE_NAME where FIELD_NAME in (LIST_OF_VALUES) Note: The actual implementation allows for a broader range of queries, but this captures the basic idea. To see the actual templates used, check out the source code in the listbuilder package There are a number of R packages that allow you to be able to construct templates this way and populate them with R objects. discoveryengine uses the whisker package, but for this simplified example, I’ll use getcdw::parameterize_template: library(getcdw) generate_query &lt;- parameterize_template(&quot; select distinct ##ID_FIELD## as ##ID_TYPE## from ##TABLE_NAME## where ##FIELD_NAME## in (##LIST_OF_VALUES##) &quot;) # generate_query is now a function with the same arguments as the # names highlighted in the template generate_query ## A parameterized template with parameters: ID_FIELD, ID_TYPE, TABLE_NAME, FIELD_NAME, LIST_OF_VALUES Now, we can get a clunky, but functional, has_affiliation widget working: has_affiliation &lt;- function(affiliations) { list(ID_FIELD = &quot;entity_id&quot;, ID_TYPE = &quot;entity_id&quot;, TABLE_NAME = &quot;cdw.d_bio_affiliation_mv&quot;, FIELD_NAME = &quot;affil_code&quot;, LIST_OF_VALUES = paste0(&quot;&#39;&quot;, affiliations, &quot;&#39;&quot;, collapse = &quot;, &quot;)) } Wait, what? I wanted to create a constituency definition, but all I got was this lousy list! C.2 A template as a data structure Recall that definitions don’t turn into IDs until we use the display function. The basic job of our display function will be to take care of two steps: Convert the definition (currently just a list) to SQL, and Send the SQL to the database, returning the appropriate data So it makes sense that has_affiliation just makes a list. It has all of the components of our definition, so we can inspect and figure out what it’s supposed to return, but it won’t actually return data from the data warehouse until we build a display function. Luckily, step 2 of the display function is easy, because that’s exactly what the function getcdw::get_cdw does (if you’re building for your own database, you just need a function here that can send SQL to your database and return a data.frame). display &lt;- function(definition) { get_cdw(to_sql(definition)) } How can we implement to_sql? Well, that’s just a matter of combining our template from generate_query with the data to fill it in from has_affiliation. The R function do.call lets us call any R function using a list of arguments. For example: # here is the usual way we call a function: # this takes 2 samples from the integers between 1 and 100 sample(x = 1:100, size = 2) ## [1] 58 67 # but what if we&#39;ve collected the arguments from some process? args &lt;- list(x = 1:100, size = 2) # sample(args) won&#39;t work. what we want is do.call, which allows us to # &quot;feed&quot; args as arguments to sample() do.call(&quot;sample&quot;, args) ## [1] 90 31 Ok, so it looks like we know how to implement to_sql: to_sql &lt;- function(definition) { do.call(&quot;generate_query&quot;, definition) } That’s basically it! Let’s test what we have: is_prytanean = has_affiliation(&quot;OC6&quot;) display(is_prytanean) ## # A tibble: 3,499 x 1 ## entity_id ## &lt;dbl&gt; ## 1 3510 ## 2 177574 ## 3 174232 ## 4 220414 ## 5 218218 ## 6 218782 ## 7 218873 ## 8 219191 ## 9 168698 ## 10 215162 ## # ... with 3,489 more rows ## and we can use multiple affiliations: is_constituent = has_affiliation(c(&quot;M2&quot;, &quot;MA4&quot;)) display(is_constituent) ## # A tibble: 2,682 x 1 ## entity_id ## &lt;dbl&gt; ## 1 3347 ## 2 3359 ## 3 23730 ## 4 15673 ## 5 18143 ## 6 27128 ## 7 27291 ## 8 21108 ## 9 637866 ## 10 638204 ## # ... with 2,672 more rows Ok! So we’ve now implemented basic widget functionality. We still have a couple of outstanding issues: The real disco engine allows you to type has_affiliation(M2, MA4) which is so much more readable and easy-to-understand than has_affiliation(c(&quot;M2&quot;, &quot;MA4&quot;)). How can we combine multiple predicates to make complex definitions? C.3 Non-standard evaluation The answer to our first outstanding issue is provided by the magic of non-standard evaluation (that link is to the Non-standard evaluation chapter of the excellent book Advanced R by Hadley Wickham, which I highly recommend). For the purposes of this simplified example, I’ll use the following: has_affiliation &lt;- function(...) { affiliations &lt;- eval(substitute(alist(...))) affiliations &lt;- as.character(affiliations) list(ID_FIELD = &quot;entity_id&quot;, ID_TYPE = &quot;entity_id&quot;, TABLE_NAME = &quot;cdw.d_bio_affiliation_mv&quot;, FIELD_NAME = &quot;affil_code&quot;, LIST_OF_VALUES = paste0(&quot;&#39;&quot;, affiliations, &quot;&#39;&quot;, collapse = &quot;, &quot;)) } Here eval(substitute(alist(...))) and as.character(affiliations) take the symbols entered by the user (I’m noting they are symbols and not characters) and convert them to a character vector. So far, so good: display( has_affiliation(M2, MA4) ) ## # A tibble: 2,682 x 1 ## entity_id ## &lt;dbl&gt; ## 1 3347 ## 2 3359 ## 3 23730 ## 4 15673 ## 5 18143 ## 6 27128 ## 7 27291 ## 8 21108 ## 9 637866 ## 10 638204 ## # ... with 2,672 more rows Note that the actual package is a little bit more careful about how it does things here, by using the lazyeval package. To see the actual code used in the Disco Engine, check out prep_dots and partial_sub in this discoveryengine source code file C.4 Combining simple definitions Now we want to know, given two existing definitions, how do we combine them into one more complex definition? The answer is surprisingly simple, but may take a minute to wrap your head around if you haven’t programmed in this way before. I’ll take things step-by-step. C.4.1 “Atomic” vs. “Complex” definitions Our first step is to distinguish between what I’ll call “atomic” and “complex” definitions. So far we’ve been working with atomic definitions – that is, simple definitions that do not use %and%, %or%, or %but_not%. Since we’ll want to build more widgets (in order to benefit from being able to combine them!), I’m going to write some scaffolding code that will make it easier to produce widgets: # widget will be a function to make ATOMIC definitions widget &lt;- function(..., ID_FIELD, ID_TYPE = ID_FIELD, TABLE_NAME, FIELD_NAME) { args &lt;- eval(substitute(alist(...))) args &lt;- as.character(args) res &lt;- list(ID_FIELD = ID_FIELD, ID_TYPE = ID_TYPE, TABLE_NAME = TABLE_NAME, FIELD_NAME = FIELD_NAME, LIST_OF_VALUES = paste0(&quot;&#39;&quot;, args, &quot;&#39;&quot;, collapse = &quot;, &quot;)) # tagging atomic definitions makes it easier to keep track # here we add an &quot;attribute&quot; specifying that the definition is atomic # if you&#39;re unfamiliar with attributes, see ?attributes structure(res, atomic = TRUE) } Now let’s re-create has_affiliation using our new scaffolding code, and also let’s create a widget called participated_in for student activities and one called on_committee for committee participation: has_affiliation &lt;- function(...) { # notice I can just pass the ... along to the next function widget(..., ID_FIELD = &quot;entity_id&quot;, TABLE_NAME = &quot;cdw.d_bio_affiliation_mv&quot;, FIELD_NAME = &quot;affil_code&quot;) } participated_in &lt;- function(...) { widget(..., ID_FIELD = &quot;entity_id&quot;, TABLE_NAME = &quot;cdw.d_bio_student_activity_mv&quot;, FIELD_NAME = &quot;student_activity_code&quot;) } on_committee &lt;- function(...) { widget(..., ID_FIELD = &quot;entity_id&quot;, TABLE_NAME = &quot;cdw.d_bio_committee_mv&quot;, FIELD_NAME = &quot;committee_code&quot;) } Just to make sure I haven’t broken anything, I quickly inspect the SQL that is being built by these widgets: # to make it easier to inspect the queries show_query &lt;- function(definition) cat(to_sql(definition)) show_query( has_affiliation(MA6, OC3) ) ## ## select distinct entity_id as entity_id ## from cdw.d_bio_affiliation_mv ## where affil_code in (&#39;MA6&#39;, &#39;OC3&#39;) show_query( participated_in(SA1, SA2) ) ## ## select distinct entity_id as entity_id ## from cdw.d_bio_student_activity_mv ## where student_activity_code in (&#39;SA1&#39;, &#39;SA2&#39;) show_query( on_committee(AE7, ME3, ME5, AE5) ) ## ## select distinct entity_id as entity_id ## from cdw.d_bio_committee_mv ## where committee_code in (&#39;AE7&#39;, &#39;ME3&#39;, &#39;ME5&#39;, &#39;AE5&#39;) C.4.2 Operations on definitions We now want to implement %and%, %or%, and %but_not%. Luckily, these are closely related to, in order, the SQL operators intersect, union, and minus. So here is the surprisingly simple template we need to construct complex queries: generate_complex_query &lt;- parameterize_template(&quot; (##LHS##) ##operator## (##RHS##) &quot;) Here LHS and RHS (which stand for “left-hand-side” and “right-hand-side”) are the SQL translations of definitions (they can be atomic or complex – as long as we know they have been converted to SQL properly, the result of this template will also be a valid SQL query). So when we translate a complex definition to SQL, all we have to do is translate the individual components to SQL. Those components (that is, LHS and RHS) may be either atomic (in which case we already know what to do) or complex (in which case we’ll just break it down again using the same logic, until we get down to atomic definitions). Now to implement our operations, we once again collect the necessary information into a list, this time tagging it as not atomic: operate &lt;- function(LHS, RHS, operator) { res &lt;- list( operator = operator, LHS = LHS, RHS = RHS ) # we need to make sure to tag the result as NOT atomic structure(res, atomic = FALSE) } `%and%` &lt;- function(LHS, RHS) operate(LHS, RHS, &quot;intersect&quot;) `%or%` &lt;- function(LHS, RHS) operate(LHS, RHS, &quot;union&quot;) `%but_not%` &lt;- function(LHS, RHS) operate(LHS, RHS, &quot;minus&quot;) C.5 Re-visiting to_sql We now have two different SQL templates – one for atomic definitions, and one for non-atomic definitions. Accordingly, we’ll update to_sql so that it uses the correct template. The fact that every definition we create, whether atomic or not, has an attribute called atomic that can be either TRUE or FALSE helps us. We’ll start by making a helper function that tells us if a definition is complex or not: is_atomic &lt;- function(definition) { # recall this attribute is always TRUE or FALSE attr(definition, &quot;atomic&quot;) } Now we can update our to_sql function to check whether a definition is atomic or not and then populate the appropriate template: to_sql &lt;- function(definition) { # we already know what to do with atomic definitions if (is_atomic(definition)) do.call(&quot;generate_query&quot;, definition) # with complex definitions, we translate the LHS and RHS to SQL, # then pass everything back to the complex query template else { translated_pieces &lt;- list( LHS = to_sql(definition$LHS), RHS = to_sql(definition$RHS), operator = definition$operator ) do.call(&quot;generate_complex_query&quot;, translated_pieces) } } If you look closely at the non-atomic part of to_sql, you may be surprised to find that it seems to be circularly defined! It helps to describe the process in plain language first: To convert a complex (i.e. non-atomic) definition to SQL, we first convert its constituent pieces to SQL, then combine the resulting SQL using the appropriate operator (intersect, union, or minus) That process is pretty easy to understand if both pieces of a non-atomic definition are atomic, but what if, say, the left-hand-side (LHS) is also non-atomic? Well, we just do the same thing, trying to convert the constituent pieces to SQL, and so forth. This works because we know that eventually we’ll hit an atomic definition. C.6 Seeing it all in action Let’s create some definitions and then see how they are being converted to SQL. # a simple definition has_engineering_affil = has_affiliation(MA4, SWE, URAE, DEN1) # a slightly more complex definition engineering_constituency_1 = has_engineering_affil %and% participated_in(UWSE, CHES, ENWE, ENSE) engineering_constituency_2 = engineering_constituency_1 %but_not% on_committee(ME3) To reassure myself that the system is working as expected, I display the most complicated constituency, and look in CADS to verify that the resulting IDs do in fact match the definition I created: display(engineering_constituency_2) ## # A tibble: 3 x 1 ## entity_id ## &lt;dbl&gt; ## 1 664489 ## 2 819567 ## 3 838088 Now, let’s take a look at the actual SQL that is being generated behind the scenes: # we&#39;ve already seen the atomic definitions turned to SQL: show_query(has_engineering_affil) ## ## select distinct entity_id as entity_id ## from cdw.d_bio_affiliation_mv ## where affil_code in (&#39;MA4&#39;, &#39;SWE&#39;, &#39;URAE&#39;, &#39;DEN1&#39;) # this is a complex definition, but both pieces are atomic: show_query(engineering_constituency_1) ## ## ( ## select distinct entity_id as entity_id ## from cdw.d_bio_affiliation_mv ## where affil_code in (&#39;MA4&#39;, &#39;SWE&#39;, &#39;URAE&#39;, &#39;DEN1&#39;) ## ) ## intersect ## ( ## select distinct entity_id as entity_id ## from cdw.d_bio_student_activity_mv ## where student_activity_code in (&#39;UWSE&#39;, &#39;CHES&#39;, &#39;ENWE&#39;, &#39;ENSE&#39;) ## ) # as the definitions get more complex, even the LHS and RHS can # be complex, but everything still can be analyzed down to atomic pieces: show_query(engineering_constituency_2) ## ## ( ## ( ## select distinct entity_id as entity_id ## from cdw.d_bio_affiliation_mv ## where affil_code in (&#39;MA4&#39;, &#39;SWE&#39;, &#39;URAE&#39;, &#39;DEN1&#39;) ## ) ## intersect ## ( ## select distinct entity_id as entity_id ## from cdw.d_bio_student_activity_mv ## where student_activity_code in (&#39;UWSE&#39;, &#39;CHES&#39;, &#39;ENWE&#39;, &#39;ENSE&#39;) ## ) ## ) ## minus ## ( ## select distinct entity_id as entity_id ## from cdw.d_bio_committee_mv ## where committee_code in (&#39;ME3&#39;) ## ) You’ll notice that, especially as the definitions grow more complex, the resulting SQL may not look exactly how you’d type it yourself. But it does work, is correct, and thanks to the Relational Algebra, I know the SQL will be optimized before running against our data. C.7 For further study If you’ve made it this far, you should have a pretty solid understanding of the basic functioning of the Discovery Engine. We did not cover some core features, in particular code lookup (aka synonym search), higher order widgets, and the bots – the brainstorm bot and the matrix bot. But armed with the knowledge you do have, you can explore the source code and see how everything else works. Feel free to reach out to Tarak via email if you have any questions. "]
]
