[
["index.html", "Documentation for discoveryengine 1 Disco", " Documentation for discoveryengine Tarak Shah 2016-08-25 1 Disco Welcome to the introduction and extended documentation for the discoveryengine! The discoveryengine, also known as “Disco Engine” or just “Disco,” is a tool enabling Prospect Development staff to do custom prospecting, written in the R programming language. Feel free to read this document in order, or to jump around or just bookmark it and refer to it as needed. You may find the search feature helpful – just click on the little magnifying glass at the top of the screen. "],
["r-intro.html", "2 Introduction to R and RStudio", " 2 Introduction to R and RStudio The discoveryengine works best when used with RStudio. Watch this video for a quick tour around RStudio: "],
["intro-example.html", "3 An introductory example 3.1 Developing a strategy 3.2 Creating the definition 3.3 Sending the definition to the CADS Data Warehouse", " 3 An introductory example Before diving in to details, let’s work through a simple real-life example. We’ll explain the functions used in more detail in later sections, but here you can see what the tool looks like in action. Here is our scenario: A fundraiser just called, and is trying to organize an event in San Francisco that will feature a well-known technologist. She wants you to help her find prospects to invite to the event. We start out by loading the discoveryengine: library(discoveryengine) 3.1 Developing a strategy You might already be thinking of what sorts of prospects we should look for. That’s good! There are countless ways to respond to this request, and you’ll have to rely on your own expertise in order to know who to include on a potential invite list. For this example, I’ll use the following definition of a good prospect: has demonstrated an interest in technology, and … lives or works in/near San Francisco Note that we now have a pretty clear idea of who to look for, but we need more precision. For instance, what constitutes a “demonstrated interest in technology?” What does it mean to be “in/near San Francisco?” In day-to-day conversations, we don’t necessarily need that level of precision to understand one another, but since we’ll need to translate this request into language a computer can understand, the more precision the better. I’ll define a “demonstrated interest in technology” as having either an interest code or a philanthropic affinity related to technology, and “in/near San Francisco” as anywhere that falls into the San Francisco Metropolitan Statistical Area (MSA). 3.2 Creating the definition So now that we have a precise idea of who we want to find, we can create a definition that the computer will understand. This is important, since our computer is the only link we have to the CADS Data Warehouse. We can give it a precise definition in a language that it understands, and it will then relay our request to the CADS Data Warehouse. The CADS data warehouse can then search for people who meet our definition, and send them back to the computer, which will then display the list to us. Ideally, our definition would look like this: has_tech_interest %and% is_in_sf. Of course, we haven’t defined those pieces yet, so just typing that in will result in an error has_tech_interest %and% is_in_sf ## Error in operate(block1, block2, &quot;intersect&quot;): object &#39;has_tech_interest&#39; not found But still we’ve made progress. We broke a big problem (“define a prospect for this SF tech event”) into two smaller problems (“define having a tech interest” and “define being in San Francisco”). Let’s tackle each of these one by one. We start by defining has_tech_interest. Recall that we decided to use interest codes and philanthropic affinities here. I happen to already know that there is an interest code for “technology”, but I’m less familiar with the philanthropic affinities area. So I’ll use the search feature that is built into most widgets, accessed by entering a question mark followed by a search term into the widget: has_philanthropic_affinity(?tech) ## synonym code ## science_technology ST Ah, ok. I can use either the code ST or the synonym science_technology. has_tech_interest = has_interest(technology) %or% has_philanthropic_affinity(science_technology) We use %or% as the connector here because we’re interested in anyone who has either one of these characteristics. We now move to defining is_in_sf. We’d like to look for anyone who lives or works in San Francisco: is_in_sf = lives_in_msa(san_francisco) %or% works_in_msa(san_francisco) We are now able to create our full definition by combining the pieces: event_prospect = has_tech_interest %and% is_in_sf 3.3 Sending the definition to the CADS Data Warehouse As we discussed in the previous section, now that we have an official definition we can send it to the data warehouse, and see if the data warehouse finds anyone who fits. You can see the definition for yourself by just typing the name of it, though it is now written in a language for the computer to understand and may look intimidating to us humans: event_prospect ## LISTBUILDER DEFINITION (type: entity_id) ## . operator (HW67): intersect ## . left (HW67): ## . . operator (FX67): union ## . . left (FX67): ## . . . source: d_bio_interest_mv.entity_id (entity_id) ## . . . logic: interest_code IN &#39;TEC&#39; ## . . right (FX67): ## . . . source: d_oth_phil_affinity_mv.entity_id (entity_id) ## . . . logic: ## . . . . other_affinity_type IN &#39;ST&#39; ## . . . . sum(gift_amt) &gt;= 0.0 ## . right (HW67): ## . . operator (NR94): union ## . . left (NR94): ## . . . source: d_bio_address_mv.entity_id (entity_id) ## . . . logic: ## . . . . geo_metro_area_code IN &#39;41860&#39; ## . . . . addr_type_code IN &#39;H&#39; ## . . right (NR94): ## . . . source: d_bio_address_mv.entity_id (entity_id) ## . . . logic: ## . . . . geo_metro_area_code IN &#39;41860&#39; ## . . . . addr_type_code IN &#39;B&#39; In order to send the definition to the data warehouse, retrieve the results, and show them to us, we use the display function: display(event_prospect) ## Loading required package: DBI ## # A tibble: 689 x 1 ## entity_id ## &lt;dbl&gt; ## 1 11535 ## 2 27562 ## 3 32528 ## 4 43187 ## 5 145337 ## 6 211715 ## 7 263076 ## 8 257211 ## 9 278872 ## 10 317044 ## # ... with 679 more rows Of course, we are probably interested in exporting this savedlist to a file, so that we might load it into CADS and run CADSmart reports on it. Conveniently, we can just do that by adding a filename: display(event_prospect, file = &quot;sf-tech-prospects&quot;) Now when I look over at my working directory, there’s a new file called sf-tech-prospects.csv "],
["working-with-widgets.html", "4 Working with widgets 4.1 Finding widgets 4.2 Codes and synonyms 4.3 Detailed controls", " 4 Working with widgets So far, we’ve used widgets in some simple examples. In this section, we’ll explore widgets in some more detail. As always, we’ll begin by loading the discoveryengine: library(discoveryengine) 4.1 Finding widgets There are two main ways to find widgets. The first is to use the show_widgets function. The function takes no arguments. When you run it, an interactive list of widgets, with short descriptions of each, will appear in your viewer window: show_widgets() You can browse the entire listing, or use the search bar at the top right to search for specific widgets. The second way to search for widgets is to use the widget_for function. This function takes as an argument a search term, and finds all widgets that are related to that search term. For example: widget_for(&quot;giving&quot;) ## fund_text_contains: ## Funds with notes/biographies that contain the specified search string(s) ## gave_to_area: ## Lists entities who gave to specific areas with minimum giving and specific date range ## gave_to_department: ## Lists entities who gave to specific departments with minimum giving and specific date range ## gave_to_fund: ## Entities who have given to specified funds ## has_philanthropic_affinity: ## Lists entities with philanthropic affinity(ies) Once you’ve found the widget you’re looking for, you can get additional information using R’s built-in help system. Just type a question mark followed by the name of the widget, e.g. ?gave_to_area. 4.2 Codes and synonyms You may have noticed in previous examples that widgets work with exact codes, such as in_unit_portfolio(BU) or with synonyms, such as in_unit_portfolio(business). Synonyms will always be in lower-case, and may include any letter of the alphabet or the underscore “_&quot; character, and nothing else. Use whichever feels more comfortable – there is no advantage to using codes vs. synonyms, though I personally find the synonyms easier to read and understand later on. If you’re not sure of the code or synonym to use, try out the synonym search feature that works with most widgets. Instead of entering a code (in_unit_portfolio(BU)) or synonym (in_unit_portfolio(business)), enter a question mark followed by a search string: in_unit_portfolio(?business) ## synonym code ## business BU You can enter partial terms: in_unit_portfolio(?sci) ## synonym code ## lawrence_hall_of_science LH ## letters_and_science LS ## neuroscience NS ## neuroscience_institute NS ## quantitative_bioscience QB ## quantitative_biosciences QB And even multiple search terms: in_unit_portfolio(?bus, ?chem, ?public) ## synonym code ## business BU ## chemistry CH ## public_health PH ## public_policy PP Widgets can always accept multiple codes/synonyms as arguments, and even combinations of the two: gave_to_area(business) would find anyone who has given to the school of Business gave_to_area(business, chemistry) would find anyone who has given to Business or to Chemistry gave_to_area(HSB, COC) is the same as above gave_to_area(business, COC) once again, the same thing 4.3 Detailed controls We saw above that gave_to_area(business) will find people who have given to the Haas School of Business. By default, this will find anyone who has ever given any amount, at any time. But gave_to_area, like many widgets, has a number of optional arguments that allow more fine-grained control. For example: gave_to_area(business, at_least = 10000): finds anyone who has given at least $10,000 lifetime to the school of Business. gave_to_area(business, at_least = 10000, from = 20160101): finds anyone who has given at least $10,000 to Business since the beginning of 2016. gave_to_area(business, at_least = 10000, from = 20150101, to = 20151231): finds anyone who gave at least $10,000 to Business between January 1, 2015 and December 31, 2015. gave_to_area(business, from = 20150101, to = 20151231): finds anyone who gave anything at all to the school of Business between January 1, 2015 and December 31, 2015 As you can see, you can pick and choose which optional arguments you want to use. "]
]
